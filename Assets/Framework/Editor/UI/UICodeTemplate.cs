#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Framework.Editor.UI
{
    /// <summary>
    /// UI代码生成模板
    /// 负责生成Binding和Logic文件的代码
    /// </summary>
    public static class UICodeTemplate
    {
        /// <summary>
        /// 生成Binding文件代码
        /// </summary>
        public static string GenerateBindingCode(
            string uiName,
            string namespaceName,
            List<UIComponentInfo> components,
            string prefabPath)
        {
            var sb = new StringBuilder();
            var timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            
            // 文件头
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("// ========================================");
            sb.AppendLine("// 自动生成的UI绑定代码");
            sb.AppendLine($"// 源文件: {prefabPath}");
            sb.AppendLine($"// 生成时间: {timestamp}");
            sb.AppendLine("// 警告: 请勿手动修改此文件，所有修改将在重新生成时丢失");
            sb.AppendLine("// ========================================");
            sb.AppendLine();
            
            // Using语句
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using UnityEngine.UI;");
            
            // 检查是否需要TMPro命名空间
            if (components.Any(c => c.ComponentTypeName == "TextTMP"))
            {
                sb.AppendLine("using TMPro;");
            }
            
            sb.AppendLine("using Framework.Core;");
            sb.AppendLine();
            
            // 命名空间
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            
            // 类注释
            sb.AppendLine("    /// <summary>");
            sb.AppendLine($"    /// {uiName} - 自动生成的组件绑定");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine($"    public partial class {uiName} : UGUIBaseUI");
            sb.AppendLine("    {");
            
            // 字段声明
            sb.AppendLine("        #region Auto-Generated Fields");
            sb.AppendLine("        ");
            foreach (var comp in components)
            {
                sb.AppendLine("        /// <summary>");
                sb.AppendLine($"        /// {comp.ComponentName}");
                sb.AppendLine($"        /// 路径: {comp.Path}");
                sb.AppendLine("        /// </summary>");
                sb.AppendLine($"        private {comp.ComponentTypeName} {comp.FieldName};");
                sb.AppendLine("        ");
            }
            sb.AppendLine("        #endregion");
            sb.AppendLine("        ");
            
            // 绑定方法
            sb.AppendLine("        #region Auto-Generated Binding");
            sb.AppendLine("        ");
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// 绑定所有标记的组件");
            sb.AppendLine("        /// 路径记录在生成时，精确查找");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        protected override void BindComponents()");
            sb.AppendLine("        {");
            sb.AppendLine("            base.BindComponents();");
            sb.AppendLine("            ");
            
            foreach (var comp in components)
            {
                if (comp.ComponentTypeName == "GameObject")
                {
                    sb.AppendLine($"            {comp.FieldName} = UIObject.transform.Find(\"{comp.Path}\").gameObject;");
                }
                else
                {
                    sb.AppendLine($"            {comp.FieldName} = FindComponent<{comp.ComponentTypeName}>(\"{comp.Path}\");");
                }
            }
            
            sb.AppendLine("        }");
            sb.AppendLine("        ");
            sb.AppendLine("        #endregion");
            sb.AppendLine("        ");
            
            // 事件注册/注销
            var buttons = components.Where(c => c.IsButton).ToList();
            if (buttons.Count > 0)
            {
                sb.AppendLine("        #region Auto-Generated Events");
                sb.AppendLine("        ");
                
                // RegisterEvents
                sb.AppendLine("        /// <summary>");
                sb.AppendLine("        /// 注册所有Button事件");
                sb.AppendLine("        /// </summary>");
                sb.AppendLine("        protected override void RegisterEvents()");
                sb.AppendLine("        {");
                sb.AppendLine("            base.RegisterEvents();");
                sb.AppendLine("            ");
                
                foreach (var btn in buttons)
                {
                    sb.AppendLine($"            {btn.FieldName}.onClick.AddListener({btn.EventHandlerName});");
                }
                
                sb.AppendLine("        }");
                sb.AppendLine("        ");
                
                // UnregisterEvents
                sb.AppendLine("        /// <summary>");
                sb.AppendLine("        /// 注销所有Button事件");
                sb.AppendLine("        /// </summary>");
                sb.AppendLine("        protected override void UnregisterEvents()");
                sb.AppendLine("        {");
                
                foreach (var btn in buttons)
                {
                    sb.AppendLine($"            {btn.FieldName}.onClick.RemoveListener({btn.EventHandlerName});");
                }
                
                sb.AppendLine("            ");
                sb.AppendLine("            base.UnregisterEvents();");
                sb.AppendLine("        }");
                sb.AppendLine("        ");
                sb.AppendLine("        #endregion");
            }
            
            // 类结束
            sb.AppendLine("    }");
            sb.AppendLine("}");
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 生成Logic文件代码（仅首次生成）
        /// </summary>
        public static string GenerateLogicCode(
            string uiName,
            string namespaceName,
            List<UIComponentInfo> components,
            string resourcePath)
        {
            var sb = new StringBuilder();
            
            // 文件头
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using Framework.Core;");
            sb.AppendLine();
            
            // 命名空间
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            
            // 类注释
            sb.AppendLine("    /// <summary>");
            sb.AppendLine($"    /// {uiName} - 业务逻辑");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine($"    public partial class {uiName}");
            sb.AppendLine("    {");
            
            // UI配置
            sb.AppendLine("        #region UI配置");
            sb.AppendLine("        ");
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// 创建UI配置");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        protected override UIConfig CreateUIConfig()");
            sb.AppendLine("        {");
            sb.AppendLine("            return new UIConfig");
            sb.AppendLine("            {");
            sb.AppendLine($"                ResourcePath = \"{resourcePath}\",");
            sb.AppendLine("                UIType = UIType.Main,");
            sb.AppendLine("                AlignType = UIAlignType.Center,");
            sb.AppendLine("                CacheStrategy = UICacheStrategy.AlwaysCache,");
            sb.AppendLine("                UseAnimation = false");
            sb.AppendLine("            };");
            sb.AppendLine("        }");
            sb.AppendLine("        ");
            sb.AppendLine("        #endregion");
            sb.AppendLine("        ");
            
            // 生命周期
            sb.AppendLine("        #region 生命周期");
            sb.AppendLine("        ");
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// 显示UI时调用");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        protected override void OnShow(params object[] args)");
            sb.AppendLine("        {");
            sb.AppendLine("            base.OnShow(args);");
            sb.AppendLine("            ");
            sb.AppendLine("            // TODO: 实现显示逻辑");
            sb.AppendLine("        }");
            sb.AppendLine("        ");
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// 隐藏UI时调用");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        protected override void OnHide(params object[] args)");
            sb.AppendLine("        {");
            sb.AppendLine("            // TODO: 实现隐藏逻辑");
            sb.AppendLine("            ");
            sb.AppendLine("            base.OnHide(args);");
            sb.AppendLine("        }");
            sb.AppendLine("        ");
            sb.AppendLine("        #endregion");
            sb.AppendLine("        ");
            
            // 事件处理
            var buttons = components.Where(c => c.IsButton).ToList();
            if (buttons.Count > 0)
            {
                sb.AppendLine("        #region 事件处理");
                sb.AppendLine("        ");
                
                foreach (var btn in buttons)
                {
                    sb.AppendLine("        /// <summary>");
                    sb.AppendLine($"        /// {btn.ComponentName} 按钮点击");
                    sb.AppendLine("        /// </summary>");
                    sb.AppendLine($"        private void {btn.EventHandlerName}()");
                    sb.AppendLine("        {");
                    sb.AppendLine("            // TODO: 实现点击逻辑");
                    sb.AppendLine("        }");
                    sb.AppendLine("        ");
                }
                
                sb.AppendLine("        #endregion");
            }
            
            // 类结束
            sb.AppendLine("    }");
            sb.AppendLine("}");
            
            return sb.ToString();
        }
    }
}
#endif
