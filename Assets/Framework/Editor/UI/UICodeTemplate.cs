#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Framework.Editor.UI
{
    /// <summary>
    /// UI代码生成模板
    /// 负责生成Binding和Logic文件的代码
    /// </summary>
    public static class UICodeTemplate
    {
        /// <summary>
        /// 生成Binding文件代码
        /// </summary>
        public static string GenerateBindingCode(
            string uiName,
            string namespaceName,
            List<UIComponentInfo> components,
            string prefabPath)
        {
            var sb = new StringBuilder();
            
            // 文件头
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("// ========================================");
            sb.AppendLine("// 自动生成的UI绑定代码");
            sb.AppendLine($"// 源文件: {prefabPath}");
            sb.AppendLine("// 警告: 请勿手动修改此文件，所有修改将在重新生成时丢失");
            sb.AppendLine("// ========================================");
            sb.AppendLine();
            
            // Using语句
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using UnityEngine.UI;");
            
            // 检查是否需要TMPro命名空间
            if (components.Any(c => c.ComponentTypeName == "TextTMP"))
            {
                sb.AppendLine("using TMPro;");
            }
            
            sb.AppendLine("using Framework.Core;");
            sb.AppendLine();
            
            // 命名空间
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            
            // 类注释
            sb.AppendLine("    /// <summary>");
            sb.AppendLine($"    /// {uiName} - 自动生成的组件绑定");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine($"    public partial class {uiName} : UIBehaviour");
            sb.AppendLine("    {");
            
            // 字段声明
            sb.AppendLine("        #region Auto-Generated Fields");
            sb.AppendLine("        ");
            foreach (var comp in components)
            {
                sb.AppendLine("        /// <summary>");
                sb.AppendLine($"        /// {comp.ComponentName}");
                sb.AppendLine($"        /// 路径: {comp.Path}");
                sb.AppendLine("        /// </summary>");
                sb.AppendLine($"        private {comp.ComponentTypeName} {comp.FieldName};");
                sb.AppendLine("        ");
            }
            sb.AppendLine("        #endregion");
            sb.AppendLine("        ");
            
            // 绑定方法
            sb.AppendLine("        #region Auto-Generated Binding");
            sb.AppendLine("        ");
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// 绑定所有标记的组件");
            sb.AppendLine("        /// 路径记录在生成时，精确查找");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        protected override void BindComponents()");
            sb.AppendLine("        {");
            sb.AppendLine("            base.BindComponents();");
            sb.AppendLine("            ");
            sb.AppendLine("            // 注意：路径是相对于当前GameObject的，不包含根节点名称");
            
            foreach (var comp in components)
            {
                // 移除路径中的根节点名称（第一个'/'之前的部分）
                var relativePath = RemoveRootNodeFromPath(comp.Path);
                
                if (comp.ComponentTypeName == "GameObject")
                {
                    sb.AppendLine($"            {comp.FieldName} = transform.Find(\"{relativePath}\").gameObject;");
                }
                else
                {
                    sb.AppendLine($"            {comp.FieldName} = FindComponent<{comp.ComponentTypeName}>(\"{relativePath}\");");
                }
            }
            
            sb.AppendLine("        }");
            sb.AppendLine("        ");
            sb.AppendLine("        #endregion");
            sb.AppendLine("        ");
            
            // 事件注册/注销
            var buttons = components.Where(c => c.IsButton).ToList();
            if (buttons.Count > 0)
            {
                sb.AppendLine("        #region Auto-Generated Events");
                sb.AppendLine("        ");
                
                // RegisterEvents
                sb.AppendLine("        /// <summary>");
                sb.AppendLine("        /// 注册所有Button事件");
                sb.AppendLine("        /// </summary>");
                sb.AppendLine("        protected override void RegisterEvents()");
                sb.AppendLine("        {");
                sb.AppendLine("            base.RegisterEvents();");
                sb.AppendLine("            ");
                
                foreach (var btn in buttons)
                {
                    sb.AppendLine($"            {btn.FieldName}.onClick.AddListener({btn.EventHandlerName});");
                }
                
                sb.AppendLine("        }");
                sb.AppendLine("        ");
                
                // UnregisterEvents
                sb.AppendLine("        /// <summary>");
                sb.AppendLine("        /// 注销所有Button事件");
                sb.AppendLine("        /// </summary>");
                sb.AppendLine("        protected override void UnregisterEvents()");
                sb.AppendLine("        {");
                sb.AppendLine("            // 添加空检查，防止组件未找到时出错");
                
                foreach (var btn in buttons)
                {
                    sb.AppendLine($"            if ({btn.FieldName} != null)");
                    sb.AppendLine($"                {btn.FieldName}.onClick.RemoveListener({btn.EventHandlerName});");
                }
                
                sb.AppendLine("            ");
                sb.AppendLine("            base.UnregisterEvents();");
                sb.AppendLine("        }");
                sb.AppendLine("        ");
                sb.AppendLine("        #endregion");
            }
            
            // 类结束
            sb.AppendLine("    }");
            sb.AppendLine("}");
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 生成Logic文件代码（仅首次生成）
        /// </summary>
        public static string GenerateLogicCode(
            string uiName,
            string namespaceName,
            List<UIComponentInfo> components,
            string resourcePath)
        {
            var sb = new StringBuilder();
            
            // 文件头
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using Framework.Core;");
            sb.AppendLine();
            
            // 命名空间
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            sb.AppendLine($"    public partial class {uiName}");
            sb.AppendLine("    {");
            
            // 生命周期
            sb.AppendLine("        protected override void OnCreate(params object[] args)");
            sb.AppendLine("        {");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("        protected override void OnShow(params object[] args)");
            sb.AppendLine("        {");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("        protected override void OnHide(params object[] args)");
            sb.AppendLine("        {");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("        private void Update()");
            sb.AppendLine("        {");
            sb.AppendLine("        }");
            sb.AppendLine();
            
            // 事件处理
            var buttons = components.Where(c => c.IsButton).ToList();
            if (buttons.Count > 0)
            {
                foreach (var btn in buttons)
                {
                    sb.AppendLine($"        private void {btn.EventHandlerName}()");
                    sb.AppendLine("        {");
                    sb.AppendLine("        }");
                    sb.AppendLine();
                }
            }
            
            // 类结束
            sb.AppendLine("    }");
            sb.AppendLine("}");
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 增量更新Logic文件（添加缺失的事件处理方法）
        /// </summary>
        public static string AppendMissingEventHandlers(
            string existingCode,
            List<UIComponentInfo> components)
        {
            var buttons = components.Where(c => c.IsButton).ToList();
            if (buttons.Count == 0)
                return existingCode;
            
            var missingHandlers = new List<UIComponentInfo>();
            
            // 检查哪些事件处理方法缺失
            foreach (var btn in buttons)
            {
                if (!existingCode.Contains($"void {btn.EventHandlerName}()"))
                {
                    missingHandlers.Add(btn);
                }
            }
            
            if (missingHandlers.Count == 0)
                return existingCode; // 没有缺失的方法
            
            // 找到最后一个 } 的位置（类结束的大括号）
            var lastBraceIndex = existingCode.LastIndexOf('}');
            if (lastBraceIndex == -1)
                return existingCode;
            
            // 找到倒数第二个 } 的位置（命名空间结束的大括号）
            var secondLastBraceIndex = existingCode.LastIndexOf('}', lastBraceIndex - 1);
            if (secondLastBraceIndex == -1)
                return existingCode;
            
            // 在倒数第二个 } 之前插入新方法
            var sb = new StringBuilder();
            sb.Append(existingCode.Substring(0, secondLastBraceIndex));
            
            // 添加新方法
            sb.AppendLine();
            foreach (var btn in missingHandlers)
            {
                sb.AppendLine($"        private void {btn.EventHandlerName}()");
                sb.AppendLine("        {");
                sb.AppendLine("        }");
                sb.AppendLine();
            }
            
            // 添加剩余部分
            sb.Append(existingCode.Substring(secondLastBraceIndex));
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 从路径中移除根节点名称
        /// 例如：MainMenuUI/Panel/@Button_Start -> Panel/@Button_Start
        /// </summary>
        private static string RemoveRootNodeFromPath(string path)
        {
            if (string.IsNullOrEmpty(path))
                return path;
            
            var firstSlashIndex = path.IndexOf('/');
            if (firstSlashIndex > 0 && firstSlashIndex < path.Length - 1)
            {
                // 移除第一个'/'之前的部分（根节点名称）
                return path.Substring(firstSlashIndex + 1);
            }
            
            // 如果没有'/'，返回空字符串（表示是根节点）
            return "";
        }
    }
}
#endif
